Ronuel Diaz
CSC332 Operating Systems
TASK 2 : Process Management System Calls
9/27/18


1) At the beginning of execution, The values that variables 'a', and 'b' are initialized with are 10, and 25 respectfully. When the first fork is called the child process has a copy of these values in its own scope. 
Currently :
Parent a=10 b=25
Child 1 a=10 b=25

2) when we get to the if statement in the parent process it is skipped since it doesnt meet the condition. The else statement is executed and the 'b' is equal to 30 in the parent process. 
Currently:
Parent a=10 b=30
Child 1 a=10 b=25

3) The child process executes the first if statement because the condition is true. In that first child, variable 'a' is changed to 35. This change does not affect the parent.
Currently:
Parent a=10 b=30
Child 1 a=35 b=25

4) Then another fork is called from the child. This creates another process that has a copy of 'a' and 'b' from the first child. 
Currently:
Parent a=10 b=30
Child 1 a=35 b=25
Child 2 a=35 b=25

5) The first child continues to run and executes the next if statement since its condition is met. At this point the first child has a value of 45 for 'b'. 
Currently:
Parent a=10 b=30
Child 1 a=35 b=45
Child 2 a=35 b=25

6) Meanwhile in the second child the first part of the if statement is skipped since the condition is not met and the else statement is executed. This causes 'a' to change to 905 in the second child.
Currently:
Parent a=10 b=30
Child 1 a=35 b=45
Child 2 a=905 b=25

Note: When running the code multiple times the print order was different for some. This is due to the speed of execution of each program and also the order at which the programs reserves the print function. Similar to mutex locking. 
